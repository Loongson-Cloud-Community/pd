run
newf innerone innertwo
assertion outerthree outerfour

require (?s)
----
----
&assert.withAssertionFailure{
    cause: &withstack.withStack{
        cause: &barriers.barrierError{
            msg:       "new-style innerone\ninnertwo",
            maskedErr: &withstack.withStack{
                cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
                stack: &stack{...},
            },
        },
        stack: &stack{...},
    },
}
=====
===== non-redactable formats
=====
== %#v
&assert.withAssertionFailure{
    cause: &withstack.withStack{
        cause: &barriers.barrierError{
            msg:       "new-style innerone\ninnertwo",
            maskedErr: &withstack.withStack{
                cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
                stack: &stack{...},
            },
        },
        stack: &stack{...},
    },
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) assertion failure
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func41
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
  | -- cause hidden behind barrier
  | new-style innerone
  | (1) attached stack trace
  |   -- stack trace:
  |   | github.com/cockroachdb/errors/fmttests.glob..func15
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective.func1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runTestInternal
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.RunTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk.func1
  |   | <tab><path>:<lineno>
  |   | testing.tRunner
  |   | <tab><path>:<lineno>
  |   | runtime.goexit
  |   | <tab><path>:<lineno>
  | Wraps: (2) new-style innerone
  |   | innertwo
  | Error types: (1) *withstack.withStack (2) *errutil.leafError
Error types: (1) *assert.withAssertionFailure (2) *withstack.withStack (3) *barriers.barrierError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
‹new-style innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
‹new-style innerone›
(1) assertion failure
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func41
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) ‹new-style innerone›
  | ‹innertwo›
  | -- cause hidden behind barrier
  | new-style ‹innerone›
  | (1) attached stack trace
  |   -- stack trace:
  |   | github.com/cockroachdb/errors/fmttests.glob..func15
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective.func1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runTestInternal
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.RunTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk.func1
  |   | <tab><path>:<lineno>
  |   | testing.tRunner
  |   | <tab><path>:<lineno>
  |   | runtime.goexit
  |   | <tab><path>:<lineno>
  | Wraps: (2) new-style ‹innerone›
  |   | ‹innertwo›
  | Error types: (1) *withstack.withStack (2) *errutil.leafError
Error types: (1) *assert.withAssertionFailure (2) *withstack.withStack (3) *barriers.barrierError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: ×
×
--
*barriers.barrierError: details for github.com/cockroachdb/errors/withstack/*withstack.withStack::: (1)
<path>:<lineno>: *withstack.withStack (top exception)
*assert.withAssertionFailure
(check the extra data payloads)
== Extra "1: details"
details for github.com/cockroachdb/errors/withstack/*withstack.withStack:::
  
   github.com/cockroachdb/errors/fmttests.glob..func15
   <tab><path>:<lineno>
   github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirective.func1
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirective
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirectiveOrSubTest
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runTestInternal
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.RunTest
   <tab><path>:<lineno>
   github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.Walk
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.Walk.func1
   <tab><path>:<lineno>
   testing.tRunner
   <tab><path>:<lineno>
   runtime.goexit
   <tab><path>:<lineno>
details for github.com/cockroachdb/errors/errutil/*errutil.leafError:::
  new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/barriers/*barriers.barrierError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/assert/*assert.withAssertionFailure (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func41)"
Title: "*barriers.barrierError: ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func41()
----
----

run
newf innerone innertwo
assertwrap outerthree outerfour

require (?s)outerthree.*outerfour.*
----
----
&assert.withAssertionFailure{
    cause: &withstack.withStack{
        cause: &errutil.withPrefix{
            cause: &barriers.barrierError{
                msg:       "new-style innerone\ninnertwo",
                maskedErr: &withstack.withStack{
                    cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
                    stack: &stack{...},
                },
            },
            prefix: "assertmsg: ‹outerthree›\n‹outerfour›",
        },
        stack: &stack{...},
    },
}
=====
===== non-redactable formats
=====
== %#v
&assert.withAssertionFailure{
    cause: &withstack.withStack{
        cause: &errutil.withPrefix{
            cause: &barriers.barrierError{
                msg:       "new-style innerone\ninnertwo",
                maskedErr: &withstack.withStack{
                    cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
                    stack: &stack{...},
                },
            },
            prefix: "assertmsg: ‹outerthree›\n‹outerfour›",
        },
        stack: &stack{...},
    },
}
== Error()
assertmsg: outerthree
outerfour: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
assertmsg: outerthree: new-style innerone
(1) assertion failure
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func42
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) assertmsg: outerthree
  | outerfour
Wraps: (4) new-style innerone
  | innertwo
  | -- cause hidden behind barrier
  | new-style innerone
  | (1) attached stack trace
  |   -- stack trace:
  |   | github.com/cockroachdb/errors/fmttests.glob..func15
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective.func1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runTestInternal
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.RunTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk.func1
  |   | <tab><path>:<lineno>
  |   | testing.tRunner
  |   | <tab><path>:<lineno>
  |   | runtime.goexit
  |   | <tab><path>:<lineno>
  | Wraps: (2) new-style innerone
  |   | innertwo
  | Error types: (1) *withstack.withStack (2) *errutil.leafError
Error types: (1) *assert.withAssertionFailure (2) *withstack.withStack (3) *errutil.withPrefix (4) *barriers.barrierError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
assertmsg: ‹outerthree›
‹outerfour›: ‹new-style innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
assertmsg: ‹outerthree›: ‹new-style innerone›
(1) assertion failure
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func42
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) assertmsg: ‹outerthree›
  | ‹outerfour›
Wraps: (4) ‹new-style innerone›
  | ‹innertwo›
  | -- cause hidden behind barrier
  | new-style ‹innerone›
  | (1) attached stack trace
  |   -- stack trace:
  |   | github.com/cockroachdb/errors/fmttests.glob..func15
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective.func1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runTestInternal
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.RunTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk.func1
  |   | <tab><path>:<lineno>
  |   | testing.tRunner
  |   | <tab><path>:<lineno>
  |   | runtime.goexit
  |   | <tab><path>:<lineno>
  | Wraps: (2) new-style ‹innerone›
  |   | ‹innertwo›
  | Error types: (1) *withstack.withStack (2) *errutil.leafError
Error types: (1) *assert.withAssertionFailure (2) *withstack.withStack (3) *errutil.withPrefix (4) *barriers.barrierError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: assertmsg: ×
×: ×
×
--
*barriers.barrierError: details for github.com/cockroachdb/errors/withstack/*withstack.withStack::: (1)
*errutil.withPrefix: assertmsg: × (2)
<path>:<lineno>: *withstack.withStack (top exception)
*assert.withAssertionFailure
(check the extra data payloads)
== Extra "1: details"
details for github.com/cockroachdb/errors/withstack/*withstack.withStack:::
  
   github.com/cockroachdb/errors/fmttests.glob..func15
   <tab><path>:<lineno>
   github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirective.func1
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirective
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirectiveOrSubTest
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runTestInternal
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.RunTest
   <tab><path>:<lineno>
   github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.Walk
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.Walk.func1
   <tab><path>:<lineno>
   testing.tRunner
   <tab><path>:<lineno>
   runtime.goexit
   <tab><path>:<lineno>
details for github.com/cockroachdb/errors/errutil/*errutil.leafError:::
  new-style ×
   ×
== Extra "2: details"
assertmsg: ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/barriers/*barriers.barrierError (*::)
github.com/cockroachdb/errors/errutil/*errutil.withPrefix (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/assert/*assert.withAssertionFailure (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func42)"
Title: "*barriers.barrierError: assertmsg: ×\n×: ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func42()
----
----

run
newf innerone innertwo
barrier outerthree outerfour

require (?s)
----
----
&barriers.barrierError{
    msg:       "new-style innerone\ninnertwo",
    maskedErr: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
=====
===== non-redactable formats
=====
== %#v
&barriers.barrierError{
    msg:       "new-style innerone\ninnertwo",
    maskedErr: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) new-style innerone
  | innertwo
  | -- cause hidden behind barrier
  | new-style innerone
  | (1) attached stack trace
  |   -- stack trace:
  |   | github.com/cockroachdb/errors/fmttests.glob..func15
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective.func1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runTestInternal
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.RunTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk.func1
  |   | <tab><path>:<lineno>
  |   | testing.tRunner
  |   | <tab><path>:<lineno>
  |   | runtime.goexit
  |   | <tab><path>:<lineno>
  | Wraps: (2) new-style innerone
  |   | innertwo
  | Error types: (1) *withstack.withStack (2) *errutil.leafError
Error types: (1) *barriers.barrierError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
‹new-style innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
‹new-style innerone›
(1) ‹new-style innerone›
  | ‹innertwo›
  | -- cause hidden behind barrier
  | new-style ‹innerone›
  | (1) attached stack trace
  |   -- stack trace:
  |   | github.com/cockroachdb/errors/fmttests.glob..func15
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective.func1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runTestInternal
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.RunTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk.func1
  |   | <tab><path>:<lineno>
  |   | testing.tRunner
  |   | <tab><path>:<lineno>
  |   | runtime.goexit
  |   | <tab><path>:<lineno>
  | Wraps: (2) new-style ‹innerone›
  |   | ‹innertwo›
  | Error types: (1) *withstack.withStack (2) *errutil.leafError
Error types: (1) *barriers.barrierError
=====
===== Sentry reporting
=====
== Message payload
×
×
--
*barriers.barrierError: details for github.com/cockroachdb/errors/withstack/*withstack.withStack::: (1)
(check the extra data payloads)
== Extra "1: details"
details for github.com/cockroachdb/errors/withstack/*withstack.withStack:::
  
   github.com/cockroachdb/errors/fmttests.glob..func15
   <tab><path>:<lineno>
   github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirective.func1
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirective
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirectiveOrSubTest
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runTestInternal
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.RunTest
   <tab><path>:<lineno>
   github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.Walk
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.Walk.func1
   <tab><path>:<lineno>
   testing.tRunner
   <tab><path>:<lineno>
   runtime.goexit
   <tab><path>:<lineno>
details for github.com/cockroachdb/errors/errutil/*errutil.leafError:::
  new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/barriers/*barriers.barrierError (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "*barriers.barrierError"
Title: "×\n×"
(NO STACKTRACE)
----
----

run
newf innerone innertwo
delegate outerthree outerfour

require (?s)outerthree.*outerfour.*
----
&fmttests.werrDelegate{
    wrapped: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
=====
===== non-redactable formats
=====
== %#v
&fmttests.werrDelegate{
    wrapped: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
== Error()
outerthree
outerfour: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
outerthree: new-style innerone
(1) outerthree
  | outerfour
  | -- multi-line
  | wrapper payload
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *fmttests.werrDelegate (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
‹outerthree›
‹outerfour›: new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
‹outerthree›: new-style ‹innerone›
(1) ‹outerthree›‹›
‹  | outerfour›
‹  | -- multi-line›
‹  | wrapper payload›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *fmttests.werrDelegate (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: ×
×: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*fmttests.werrDelegate
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/fmttests/*fmttests.werrDelegate (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: ×\n×: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
delegate-empty outerthree outerfour

require (?s)
----
&fmttests.werrDelegateEmpty{
    wrapped: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
=====
===== non-redactable formats
=====
== %#v
&fmttests.werrDelegateEmpty{
    wrapped: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1)
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *fmttests.werrDelegateEmpty (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style ‹innerone›
(1)
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *fmttests.werrDelegateEmpty (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*fmttests.werrDelegateEmpty
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/fmttests/*fmttests.werrDelegateEmpty (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
delegate-noprefix outerthree outerfour

require (?s)
----
&fmttests.werrDelegateNoPrefix{
    wrapped: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
=====
===== non-redactable formats
=====
== %#v
&fmttests.werrDelegateNoPrefix{
    wrapped: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) detail
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *fmttests.werrDelegateNoPrefix (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style ‹innerone›
(1) ‹detail›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *fmttests.werrDelegateNoPrefix (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*fmttests.werrDelegateNoPrefix
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/fmttests/*fmttests.werrDelegateNoPrefix (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
detail outerthree outerfour

require (?s)
----
&hintdetail.withDetail{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    detail: "outerthree\nouterfour",
}
=====
===== non-redactable formats
=====
== %#v
&hintdetail.withDetail{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    detail: "outerthree\nouterfour",
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) outerthree
  | outerfour
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *hintdetail.withDetail (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style ‹innerone›
(1) ‹outerthree›
‹  | outerfour›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *hintdetail.withDetail (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*hintdetail.withDetail
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/hintdetail/*hintdetail.withDetail (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
domain outerthree outerfour

require (?s)
----
&domains.withDomain{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    domain: "mydomain",
}
=====
===== non-redactable formats
=====
== %#v
&domains.withDomain{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    domain: "mydomain",
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) mydomain
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *domains.withDomain (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style ‹innerone›
(1) mydomain
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *domains.withDomain (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*domains.withDomain: mydomain (2)
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "2: details"
mydomain
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/domains/*domains.withDomain (*::mydomain)
== Exception 1 (Module: "mydomain")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
elided-cause outerthree outerfour

require (?s)outerthree.*outerfour
----
&fmttests.werrWithElidedCause{
    wrapped: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
=====
===== non-redactable formats
=====
== %#v
&fmttests.werrWithElidedCause{
    wrapped: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
== Error()
outerthree
outerfour
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
outerthree
(1) outerthree
  | outerfour
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *fmttests.werrWithElidedCause (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
‹outerthree›
‹outerfour›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
‹outerthree›
(1) ‹outerthree›‹›
‹  | outerfour›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *fmttests.werrWithElidedCause (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*fmttests.werrWithElidedCause
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/fmttests/*fmttests.werrWithElidedCause (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
empty outerthree outerfour

require (?s)
----
&fmttests.werrEmpty{
    wrapped: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
=====
===== non-redactable formats
=====
== %#v
&fmttests.werrEmpty{
    wrapped: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1)
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *fmttests.werrEmpty (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style ‹innerone›
(1)
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *fmttests.werrEmpty (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*fmttests.werrEmpty
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/fmttests/*fmttests.werrEmpty (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
fmt outerthree outerfour

require (?s)outerthree.*outerfour.*
----
&fmttests.werrFmt{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
=====
===== non-redactable formats
=====
== %#v
&fmttests.werrFmt{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
== Error()
outerthree
outerfour: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
outerthree: new-style innerone
(1) outerthree
  | outerfour
  | -- this is outerthree
  | outerfour's
  | multi-line wrapper payload
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *fmttests.werrFmt (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
‹outerthree›
‹outerfour›: new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
‹outerthree›: new-style ‹innerone›
(1) ‹outerthree›‹›
‹  | outerfour›
‹  | -- this is outerthree›
‹  | outerfour's›
‹  | multi-line wrapper payload›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *fmttests.werrFmt (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: ×
×: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*fmttests.werrFmt
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/fmttests/*fmttests.werrFmt (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: ×\n×: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
fmt-old outerthree outerfour

accept %\+v via Formattable.*IRREGULAR: not same as %\+v
accept %\#v via Formattable.*IRREGULAR: not same as %\#v

require (?s)outerthree.*outerfour.*
----
&fmttests.werrFmto{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
=====
===== non-redactable formats
=====
== %#v
"outerthree\nouterfour: new-style innerone\ninnertwo"
== Error()
outerthree
outerfour: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (2) new-style innerone
  | innertwo
Error types: (1) *withstack.withStack (2) *errutil.leafError
-- this is outerthree
outerfour's
multi-line payload (fmt)
== %#v via Formattable() (IRREGULAR: not same as %#v)
&fmttests.werrFmto{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() (IRREGULAR: not same as %+v)
outerthree: new-style innerone
(1) outerthree
  | outerfour
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *fmttests.werrFmto (2) *withstack.withStack (3) *errutil.leafError
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
‹outerthree›
‹outerfour›: new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v via Formattable()
‹outerthree›: new-style ‹innerone›
(1) ‹outerthree›‹›
‹  | outerfour›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *fmttests.werrFmto (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: ×
×: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*fmttests.werrFmto
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/fmttests/*fmttests.werrFmto (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: ×\n×: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
fmt-old-delegate outerthree outerfour

accept %\+v via Formattable.*IRREGULAR: not same as %\+v
accept %\#v via Formattable.*IRREGULAR: not same as %\#v

require (?s)outerthree.*outerfour.*
----
&fmttests.werrFmtoDelegate{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
=====
===== non-redactable formats
=====
== %#v
"outerthree\nouterfour: new-style innerone\ninnertwo"
== Error()
outerthree
outerfour: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (2) new-style innerone
  | innertwo
Error types: (1) *withstack.withStack (2) *errutil.leafError
-- this is outerthree
outerfour's
multi-line wrapper payload
== %#v via Formattable() (IRREGULAR: not same as %#v)
&fmttests.werrFmtoDelegate{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() (IRREGULAR: not same as %+v)
outerthree: new-style innerone
(1) outerthree
  | outerfour
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *fmttests.werrFmtoDelegate (2) *withstack.withStack (3) *errutil.leafError
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
‹outerthree›
‹outerfour›: new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v via Formattable()
‹outerthree›: new-style ‹innerone›
(1) ‹outerthree›‹›
‹  | outerfour›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *fmttests.werrFmtoDelegate (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: ×
×: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*fmttests.werrFmtoDelegate
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/fmttests/*fmttests.werrFmtoDelegate (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: ×\n×: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
fmt-partial outerthree outerfour

require (?s)outerthree.*outerfour.*
----
&fmttests.werrFmtp{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
=====
===== non-redactable formats
=====
== %#v
&fmttests.werrFmtp{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
== Error()
outerthree
outerfour: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
outerthree: new-style innerone
(1) outerthree
  | outerfour
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *fmttests.werrFmtp (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
‹outerthree›
‹outerfour›: new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
‹outerthree›: new-style ‹innerone›
(1) ‹outerthree›‹›
‹  | outerfour›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *fmttests.werrFmtp (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: ×
×: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*fmttests.werrFmtp
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/fmttests/*fmttests.werrFmtp (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: ×\n×: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
goerr outerthree outerfour

accept %\+v via Formattable.*IRREGULAR: not same as %\+v
accept %\#v via Formattable.*IRREGULAR: not same as %\#v

require (?s)outerthree.*outerfour.*
----
&fmt.wrapError{
    msg: "outerthree\nouterfour: new-style innerone\ninnertwo",
    err: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
=====
===== non-redactable formats
=====
== %#v
&fmt.wrapError{msg:"outerthree\nouterfour: new-style innerone\ninnertwo", err:(*withstack.withStack)(0xAAAABBBB)}
== Error()
outerthree
outerfour: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v = Error(), ok
== %#v via Formattable() (IRREGULAR: not same as %#v)
&fmt.wrapError{
    msg: "outerthree\nouterfour: new-style innerone\ninnertwo",
    err: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() (IRREGULAR: not same as %+v)
outerthree: new-style innerone
(1) outerthree
  | outerfour
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *fmt.wrapError (2) *withstack.withStack (3) *errutil.leafError
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
‹outerthree›
‹outerfour›: new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v via Formattable()
‹outerthree›: new-style ‹innerone›
(1) ‹outerthree›‹›
‹  | outerfour›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *fmt.wrapError (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: ×
×: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*fmt.wrapError
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
fmt/*fmt.wrapError (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: ×\n×: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
handled-domain outerthree outerfour

require (?s)
----
----
&domains.withDomain{
    cause: &barriers.barrierError{
        msg:       "new-style innerone\ninnertwo",
        maskedErr: &withstack.withStack{
            cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
            stack: &stack{...},
        },
    },
    domain: "error domain: pkg <path>",
}
=====
===== non-redactable formats
=====
== %#v
&domains.withDomain{
    cause: &barriers.barrierError{
        msg:       "new-style innerone\ninnertwo",
        maskedErr: &withstack.withStack{
            cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
            stack: &stack{...},
        },
    },
    domain: "error domain: pkg <path>",
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) error domain: pkg <path>
Wraps: (2) new-style innerone
  | innertwo
  | -- cause hidden behind barrier
  | new-style innerone
  | (1) attached stack trace
  |   -- stack trace:
  |   | github.com/cockroachdb/errors/fmttests.glob..func15
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective.func1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runTestInternal
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.RunTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk.func1
  |   | <tab><path>:<lineno>
  |   | testing.tRunner
  |   | <tab><path>:<lineno>
  |   | runtime.goexit
  |   | <tab><path>:<lineno>
  | Wraps: (2) new-style innerone
  |   | innertwo
  | Error types: (1) *withstack.withStack (2) *errutil.leafError
Error types: (1) *domains.withDomain (2) *barriers.barrierError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
‹new-style innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
‹new-style innerone›
(1) error domain: pkg <path>
Wraps: (2) ‹new-style innerone›
  | ‹innertwo›
  | -- cause hidden behind barrier
  | new-style ‹innerone›
  | (1) attached stack trace
  |   -- stack trace:
  |   | github.com/cockroachdb/errors/fmttests.glob..func15
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective.func1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runTestInternal
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.RunTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk.func1
  |   | <tab><path>:<lineno>
  |   | testing.tRunner
  |   | <tab><path>:<lineno>
  |   | runtime.goexit
  |   | <tab><path>:<lineno>
  | Wraps: (2) new-style ‹innerone›
  |   | ‹innertwo›
  | Error types: (1) *withstack.withStack (2) *errutil.leafError
Error types: (1) *domains.withDomain (2) *barriers.barrierError
=====
===== Sentry reporting
=====
== Message payload
×
×
--
*barriers.barrierError: details for github.com/cockroachdb/errors/withstack/*withstack.withStack::: (1)
*domains.withDomain: error domain: pkg <path> (2)
(check the extra data payloads)
== Extra "1: details"
details for github.com/cockroachdb/errors/withstack/*withstack.withStack:::
  
   github.com/cockroachdb/errors/fmttests.glob..func15
   <tab><path>:<lineno>
   github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirective.func1
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirective
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirectiveOrSubTest
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runTestInternal
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.RunTest
   <tab><path>:<lineno>
   github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.Walk
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.Walk.func1
   <tab><path>:<lineno>
   testing.tRunner
   <tab><path>:<lineno>
   runtime.goexit
   <tab><path>:<lineno>
details for github.com/cockroachdb/errors/errutil/*errutil.leafError:::
  new-style ×
   ×
== Extra "2: details"
error domain: pkg <path>
== Extra "error types"
github.com/cockroachdb/errors/barriers/*barriers.barrierError (*::)
github.com/cockroachdb/errors/domains/*domains.withDomain (*::error domain: pkg <path>)
== Exception 1 (Module: "error domain: pkg <path>")
Type: "*barriers.barrierError"
Title: "×\n×"
(NO STACKTRACE)
----
----

run
newf innerone innertwo
hint outerthree outerfour

require (?s)
----
&hintdetail.withHint{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    hint: "outerthree\nouterfour",
}
=====
===== non-redactable formats
=====
== %#v
&hintdetail.withHint{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    hint: "outerthree\nouterfour",
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) outerthree
  | outerfour
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *hintdetail.withHint (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style ‹innerone›
(1) ‹outerthree›
‹  | outerfour›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *hintdetail.withHint (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*hintdetail.withHint
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/hintdetail/*hintdetail.withHint (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
issuelink outerthree outerfour

require (?s)
----
&issuelink.withIssueLink{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    IssueLink: issuelink.IssueLink{IssueURL:"https://mysite", Detail:"outerthree\nouterfour"},
}
=====
===== non-redactable formats
=====
== %#v
&issuelink.withIssueLink{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    IssueLink: issuelink.IssueLink{IssueURL:"https://mysite", Detail:"outerthree\nouterfour"},
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) issue: https://mysite
  | detail: outerthree
  | outerfour
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *issuelink.withIssueLink (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style ‹innerone›
(1) issue: https://mysite
  | detail: outerthree
  | outerfour
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *issuelink.withIssueLink (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*issuelink.withIssueLink: https://mysite (2)
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "2: details"
https://mysite
outerthree
   outerfour
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/issuelink/*issuelink.withIssueLink (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
migrated outerthree outerfour

require (?s)
----
&fmttests.werrMigrated{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
=====
===== non-redactable formats
=====
== %#v
&fmttests.werrMigrated{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1)
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *fmttests.werrMigrated (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style ‹innerone›
(1)
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *fmttests.werrMigrated (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*fmttests.werrMigrated
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/fmttests/*fmttests.werrMigrated (some/previous/path/prevpkg.prevType::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
msg outerthree outerfour

require (?s)outerthree.*outerfour.*
----
&errutil.withPrefix{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    prefix: "outerthree\nouterfour",
}
=====
===== non-redactable formats
=====
== %#v
&errutil.withPrefix{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    prefix: "outerthree\nouterfour",
}
== Error()
outerthree
outerfour: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
outerthree: new-style innerone
(1) outerthree
  | outerfour
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *errutil.withPrefix (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
outerthree
outerfour: new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
outerthree: new-style ‹innerone›
(1) outerthree
  | outerfour
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *errutil.withPrefix (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: outerthree
outerfour: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*errutil.withPrefix: outerthree (2)
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "2: details"
outerthree
   outerfour
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/errutil/*errutil.withPrefix (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: outerthree\nouterfour: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
newfw outerthree outerfour

require (?s)outerthree.*outerfour.*
----
----
&withstack.withStack{
    cause: &secondary.withSecondaryError{
        cause: &errutil.withNewMessage{
            cause: &withstack.withStack{
                cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
                stack: &stack{...},
            },
            message: "new-style (‹outerthree›\n‹outerfour›) :: new-style ‹innerone›\n‹innertwo› ::",
        },
        secondaryError: &withstack.withStack{
            cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
            stack: &stack{...},
        },
    },
    stack: &stack{...},
}
=====
===== non-redactable formats
=====
== %#v
&withstack.withStack{
    cause: &secondary.withSecondaryError{
        cause: &errutil.withNewMessage{
            cause: &withstack.withStack{
                cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
                stack: &stack{...},
            },
            message: "new-style (‹outerthree›\n‹outerfour›) :: new-style ‹innerone›\n‹innertwo› ::",
        },
        secondaryError: &withstack.withStack{
            cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
            stack: &stack{...},
        },
    },
    stack: &stack{...},
}
== Error()
new-style (outerthree
outerfour) :: new-style innerone
innertwo ::
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style (outerthree
(1) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func39
  | <tab><path>:<lineno>
  | [...repeated from below...]
Wraps: (2) secondary error attachment
  | new-style innerone
  | (1) attached stack trace
  |   -- stack trace:
  |   | github.com/cockroachdb/errors/fmttests.glob..func15
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective.func1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runTestInternal
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.RunTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk.func1
  |   | <tab><path>:<lineno>
  |   | testing.tRunner
  |   | <tab><path>:<lineno>
  |   | runtime.goexit
  |   | <tab><path>:<lineno>
  | Wraps: (2) new-style innerone
  |   | innertwo
  | Error types: (1) *withstack.withStack (2) *errutil.leafError
Wraps: (3) new-style (outerthree
  | outerfour) :: new-style innerone
  | innertwo ::
Wraps: (4) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (5) new-style innerone
  | innertwo
Error types: (1) *withstack.withStack (2) *secondary.withSecondaryError (3) *errutil.withNewMessage (4) *withstack.withStack (5) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style (‹outerthree›
‹outerfour›) :: new-style ‹innerone›
‹innertwo› ::
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style (‹outerthree›
(1) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func39
  | <tab><path>:<lineno>
  | [...repeated from below...]
Wraps: (2) secondary error attachment
  | new-style ‹innerone›
  | (1) attached stack trace
  |   -- stack trace:
  |   | github.com/cockroachdb/errors/fmttests.glob..func15
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective.func1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runTestInternal
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.RunTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk.func1
  |   | <tab><path>:<lineno>
  |   | testing.tRunner
  |   | <tab><path>:<lineno>
  |   | runtime.goexit
  |   | <tab><path>:<lineno>
  | Wraps: (2) new-style ‹innerone›
  |   | ‹innertwo›
  | Error types: (1) *withstack.withStack (2) *errutil.leafError
Wraps: (3) new-style (‹outerthree›
  | ‹outerfour›) :: new-style ‹innerone›
  | ‹innertwo› ::
Wraps: (4) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (5) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *withstack.withStack (2) *secondary.withSecondaryError (3) *errutil.withNewMessage (4) *withstack.withStack (5) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style (×
×) :: new-style ×
× ::
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*errutil.withNewMessage: new-style (× (2)
*secondary.withSecondaryError: details for github.com/cockroachdb/errors/withstack/*withstack.withStack::: (3)
<path>:<lineno>: *withstack.withStack (4)
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "2: details"
new-style (×
   ×) :: new-style ×
   × ::
== Extra "3: details"
details for github.com/cockroachdb/errors/withstack/*withstack.withStack:::
  
   github.com/cockroachdb/errors/fmttests.glob..func15
   <tab><path>:<lineno>
   github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirective.func1
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirective
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirectiveOrSubTest
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runTestInternal
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.RunTest
   <tab><path>:<lineno>
   github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.Walk
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.Walk.func1
   <tab><path>:<lineno>
   testing.tRunner
   <tab><path>:<lineno>
   runtime.goexit
   <tab><path>:<lineno>
details for github.com/cockroachdb/errors/errutil/*errutil.leafError:::
  new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/errutil/*errutil.withNewMessage (*::)
github.com/cockroachdb/errors/secondary/*secondary.withSecondaryError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "(4) <path>:<lineno> (func39)"
Title: "*withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func39()
== Exception 2 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style (×\n×) :: new-style ×\n× ::\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()
----
----

run
newf innerone innertwo
nofmt outerthree outerfour

accept %\+v via Formattable.*IRREGULAR: not same as %\+v
accept %\#v via Formattable.*IRREGULAR: not same as %\#v

require (?s)outerthree.*outerfour.*
----
&fmttests.werrNoFmt{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
=====
===== non-redactable formats
=====
== %#v
&fmttests.werrNoFmt{cause:(*withstack.withStack)(0xAAAABBBB), msg:"outerthree\nouterfour"}
== Error()
outerthree
outerfour: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v = Error(), ok
== %#v via Formattable() (IRREGULAR: not same as %#v)
&fmttests.werrNoFmt{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() (IRREGULAR: not same as %+v)
outerthree: new-style innerone
(1) outerthree
  | outerfour
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *fmttests.werrNoFmt (2) *withstack.withStack (3) *errutil.leafError
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
‹outerthree›
‹outerfour›: new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v via Formattable()
‹outerthree›: new-style ‹innerone›
(1) ‹outerthree›‹›
‹  | outerfour›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *fmttests.werrNoFmt (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: ×
×: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*fmttests.werrNoFmt
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/fmttests/*fmttests.werrNoFmt (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: ×\n×: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
os-link outerthree outerfour

accept %\+v via Formattable.*IRREGULAR: not same as %\+v
accept %\#v via Formattable.*IRREGULAR: not same as %\#v

require (?s)
----
&os.LinkError{
    Op:  "link",
    Old: "/path/to/file",
    New: "/path/to/newfile",
    Err: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
=====
===== non-redactable formats
=====
== %#v
&os.LinkError{Op:"link", Old:"/path/to/file", New:"/path/to/newfile", Err:&withstack.withStack{
    cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
    stack: &stack{...},
}}
== Error()
link /path/to/file /path/to/newfile: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v = Error(), ok
== %#v via Formattable() (IRREGULAR: not same as %#v)
&os.LinkError{
    Op:  "link",
    Old: "/path/to/file",
    New: "/path/to/newfile",
    Err: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() (IRREGULAR: not same as %+v)
link /path/to/file /path/to/newfile: new-style innerone
(1) link /path/to/file /path/to/newfile
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *os.LinkError (2) *withstack.withStack (3) *errutil.leafError
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
link ‹/path/to/file› ‹/path/to/newfile›: new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v via Formattable()
link ‹/path/to/file› ‹/path/to/newfile›: new-style ‹innerone›
(1) link ‹/path/to/file› ‹/path/to/newfile›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *os.LinkError (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: link × ×: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*os.LinkError
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
os/*os.LinkError (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: link × ×: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
os-netop outerthree outerfour

accept %\+v via Formattable.*IRREGULAR: not same as %\+v
accept %\#v via Formattable.*IRREGULAR: not same as %\#v

require (?s)
----
&net.OpError{
    Op:     "send",
    Net:    "tcp",
    Source: nil,
    Addr:   &net.UnixAddr{Name:"unixhello", Net:"unixgram"},
    Err:    &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
=====
===== non-redactable formats
=====
== %#v
&net.OpError{Op:"send", Net:"tcp", Source:net.Addr(nil), Addr:(*net.UnixAddr)(0xAAAABBBB), Err:&withstack.withStack{
    cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
    stack: &stack{...},
}}
== Error()
send tcp unixhello: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v = Error(), ok
== %#v via Formattable() (IRREGULAR: not same as %#v)
&net.OpError{
    Op:     "send",
    Net:    "tcp",
    Source: nil,
    Addr:   &net.UnixAddr{Name:"unixhello", Net:"unixgram"},
    Err:    &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() (IRREGULAR: not same as %+v)
send tcp unixhello: new-style innerone
(1) send tcp unixhello
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *net.OpError (2) *withstack.withStack (3) *errutil.leafError
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
send tcp ‹unixhello›: new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v via Formattable()
send tcp ‹unixhello›: new-style ‹innerone›
(1) send tcp ‹unixhello›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *net.OpError (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: send tcp ×: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*net.OpError
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
net/*net.OpError (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: send tcp ×: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
os-path outerthree outerfour

accept %\+v via Formattable.*IRREGULAR: not same as %\+v
accept %\#v via Formattable.*IRREGULAR: not same as %\#v

require (?s)
----
&os.PathError{
    Op:   "link",
    Path: "/path/to/file",
    Err:  &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
=====
===== non-redactable formats
=====
== %#v
&os.PathError{Op:"link", Path:"/path/to/file", Err:&withstack.withStack{
    cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
    stack: &stack{...},
}}
== Error()
link /path/to/file: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v = Error(), ok
== %#v via Formattable() (IRREGULAR: not same as %#v)
&os.PathError{
    Op:   "link",
    Path: "/path/to/file",
    Err:  &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() (IRREGULAR: not same as %+v)
link /path/to/file: new-style innerone
(1) link /path/to/file
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *os.PathError (2) *withstack.withStack (3) *errutil.leafError
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
link ‹/path/to/file›: new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v via Formattable()
link ‹/path/to/file›: new-style ‹innerone›
(1) link ‹/path/to/file›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *os.PathError (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: link ×: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*os.PathError
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
os/*os.PathError (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: link ×: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
os-syscall outerthree outerfour

accept %\+v via Formattable.*IRREGULAR: not same as %\+v
accept %\#v via Formattable.*IRREGULAR: not same as %\#v

require (?s)
----
&os.SyscallError{
    Syscall: "open",
    Err:     &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
=====
===== non-redactable formats
=====
== %#v
&os.SyscallError{Syscall:"open", Err:&withstack.withStack{
    cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
    stack: &stack{...},
}}
== Error()
open: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v = Error(), ok
== %#v via Formattable() (IRREGULAR: not same as %#v)
&os.SyscallError{
    Syscall: "open",
    Err:     &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
}
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() (IRREGULAR: not same as %+v)
open: new-style innerone
(1) open
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *os.SyscallError (2) *withstack.withStack (3) *errutil.leafError
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
open: new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v via Formattable()
open: new-style ‹innerone›
(1) open
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *os.SyscallError (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: open: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*os.SyscallError
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
os/*os.SyscallError (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: open: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
pkgmsg outerthree outerfour

accept %x.*IRREGULAR: not same as hex Error
accept %q.*IRREGULAR: not same as quoted Error
accept %X.*IRREGULAR: not same as HEX Error
accept %\#v via Formattable.*IRREGULAR: not same as %\#v
accept %\+v via Formattable.*IRREGULAR: not same as %\+v
require (?s)outerthree.*outerfour.*
----
&errors.withMessage{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
=====
===== non-redactable formats
=====
== %#v
outerthree
outerfour: new-style innerone
innertwo
== Error()
outerthree
outerfour: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q (IRREGULAR: not same as quoted Error())
outerthree
outerfour: new-style innerone
innertwo
== %x (IRREGULAR: not same as hex Error())
(EMPTY STRING)
== %X (IRREGULAR: not same as HEX Error())
(EMPTY STRING)
== %+v
new-style innerone
(1) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (2) new-style innerone
  | innertwo
Error types: (1) *withstack.withStack (2) *errutil.leafError
outerthree
outerfour
== %#v via Formattable() (IRREGULAR: not same as %#v)
&errors.withMessage{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    msg: "outerthree\nouterfour",
}
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() (IRREGULAR: not same as %+v)
outerthree: new-style innerone
(1) outerthree
  | outerfour
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *errors.withMessage (2) *withstack.withStack (3) *errutil.leafError
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
‹outerthree›
‹outerfour›: new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v via Formattable()
‹outerthree›: new-style ‹innerone›
(1) ‹outerthree›‹›
‹  | outerfour›
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *errors.withMessage (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: ×
×: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*errors.withMessage
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/pkg/errors/*errors.withMessage (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: ×\n×: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
pkgstack outerthree outerfour

accept %x.*IRREGULAR: not same as hex Error
accept %q.*IRREGULAR: not same as quoted Error
accept %X.*IRREGULAR: not same as HEX Error
accept %\#v via Formattable.*IRREGULAR: not same as %\#v
accept %\+v via Formattable.*IRREGULAR: not same as %\+v
require (?s)
----
&errors.withStack{
    error: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    stack: &stack{...},
}
=====
===== non-redactable formats
=====
== %#v
new-style innerone
innertwo
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x (IRREGULAR: not same as hex Error())
(EMPTY STRING)
== %X (IRREGULAR: not same as HEX Error())
(EMPTY STRING)
== %+v
new-style innerone
(1) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (2) new-style innerone
  | innertwo
Error types: (1) *withstack.withStack (2) *errutil.leafError
github.com/cockroachdb/errors/fmttests.glob..func26
<tab><path>:<lineno>
github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
<tab><path>:<lineno>
github.com/cockroachdb/datadriven.runDirective.func1
<tab><path>:<lineno>
github.com/cockroachdb/datadriven.runDirective
<tab><path>:<lineno>
github.com/cockroachdb/datadriven.runDirectiveOrSubTest
<tab><path>:<lineno>
github.com/cockroachdb/datadriven.runTestInternal
<tab><path>:<lineno>
github.com/cockroachdb/datadriven.RunTest
<tab><path>:<lineno>
github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
<tab><path>:<lineno>
github.com/cockroachdb/datadriven.Walk
<tab><path>:<lineno>
github.com/cockroachdb/datadriven.Walk.func1
<tab><path>:<lineno>
testing.tRunner
<tab><path>:<lineno>
runtime.goexit
<tab><path>:<lineno>
== %#v via Formattable() (IRREGULAR: not same as %#v)
&errors.withStack{
    error: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    stack: &stack{...},
}
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() (IRREGULAR: not same as %+v)
new-style innerone
(1)
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func26
  | <tab><path>:<lineno>
  | [...repeated from below...]
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *errors.withStack (2) *withstack.withStack (3) *errutil.leafError
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v via Formattable()
new-style ‹innerone›
(1)
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func26
  | <tab><path>:<lineno>
  | [...repeated from below...]
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *errors.withStack (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
<path>:<lineno>: *errors.withStack (2)
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/pkg/errors/*errors.withStack (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "(2) <path>:<lineno> (func26)"
Title: "*errors.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func26()
== Exception 2 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
safedetails outerthree outerfour

require (?s)
----
&safedetails.withSafeDetails{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    safeDetails: {"safe ×\n×"},
}
=====
===== non-redactable formats
=====
== %#v
&safedetails.withSafeDetails{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    safeDetails: {"safe ×\n×"},
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) safe ×
  | ×
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *safedetails.withSafeDetails (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style ‹innerone›
(1) safe ×
  | ×
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *safedetails.withSafeDetails (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*safedetails.withSafeDetails: safe × (2)
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "2: details"
safe ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/safedetails/*safedetails.withSafeDetails (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
secondary outerthree outerfour

require (?s)
----
----
&secondary.withSecondaryError{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    secondaryError: &withstack.withStack{
        cause: &errutil.leafError{msg:"outerthree\nouterfour"},
        stack: &stack{...},
    },
}
=====
===== non-redactable formats
=====
== %#v
&secondary.withSecondaryError{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    secondaryError: &withstack.withStack{
        cause: &errutil.leafError{msg:"outerthree\nouterfour"},
        stack: &stack{...},
    },
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) secondary error attachment
  | outerthree
  | (1) attached stack trace
  |   -- stack trace:
  |   | github.com/cockroachdb/errors/fmttests.glob..func50
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective.func1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runTestInternal
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.RunTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk.func1
  |   | <tab><path>:<lineno>
  |   | testing.tRunner
  |   | <tab><path>:<lineno>
  |   | runtime.goexit
  |   | <tab><path>:<lineno>
  | Wraps: (2) outerthree
  |   | outerfour
  | Error types: (1) *withstack.withStack (2) *errutil.leafError
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *secondary.withSecondaryError (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style ‹innerone›
(1) secondary error attachment
  | outerthree
  | (1) attached stack trace
  |   -- stack trace:
  |   | github.com/cockroachdb/errors/fmttests.glob..func50
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective.func1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runTestInternal
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.RunTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk.func1
  |   | <tab><path>:<lineno>
  |   | testing.tRunner
  |   | <tab><path>:<lineno>
  |   | runtime.goexit
  |   | <tab><path>:<lineno>
  | Wraps: (2) outerthree
  |   | outerfour
  | Error types: (1) *withstack.withStack (2) *errutil.leafError
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *secondary.withSecondaryError (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*secondary.withSecondaryError: details for github.com/cockroachdb/errors/withstack/*withstack.withStack::: (2)
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "2: details"
details for github.com/cockroachdb/errors/withstack/*withstack.withStack:::
  
   github.com/cockroachdb/errors/fmttests.glob..func50
   <tab><path>:<lineno>
   github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirective.func1
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirective
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirectiveOrSubTest
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runTestInternal
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.RunTest
   <tab><path>:<lineno>
   github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.Walk
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.Walk.func1
   <tab><path>:<lineno>
   testing.tRunner
   <tab><path>:<lineno>
   runtime.goexit
   <tab><path>:<lineno>
details for github.com/cockroachdb/errors/errutil/*errutil.leafError:::
  outerthree
   outerfour
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/secondary/*secondary.withSecondaryError (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()
----
----

run
newf innerone innertwo
stack outerthree outerfour

require (?s)
----
&withstack.withStack{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    stack: &stack{...},
}
=====
===== non-redactable formats
=====
== %#v
&withstack.withStack{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    stack: &stack{...},
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func37
  | <tab><path>:<lineno>
  | [...repeated from below...]
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *withstack.withStack (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style ‹innerone›
(1) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func37
  | <tab><path>:<lineno>
  | [...repeated from below...]
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *withstack.withStack (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
<path>:<lineno>: *withstack.withStack (2)
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "(2) <path>:<lineno> (func37)"
Title: "*withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func37()
== Exception 2 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
tags outerthree outerfour

require (?s)
----
&contexttags.withContext{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    tags: &logtags.Buffer{
        tags: {
            {
                key:   "k",
                value: int(123),
            },
            {
                key:   "safe",
                value: redact.safeWrapper{
                    a:  int(456),
                },
            },
        },
        prealloc: {
            {
                key:   "k",
                value: int(123),
            },
            {
                key:   "safe",
                value: redact.safeWrapper{
                    a:  int(456),
                },
            },
            {},
            {},
        },
    },
    redactedTags: nil,
}
=====
===== non-redactable formats
=====
== %#v
&contexttags.withContext{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    tags: &logtags.Buffer{
        tags: {
            {
                key:   "k",
                value: int(123),
            },
            {
                key:   "safe",
                value: redact.safeWrapper{
                    a:  int(456),
                },
            },
        },
        prealloc: {
            {
                key:   "k",
                value: int(123),
            },
            {
                key:   "safe",
                value: redact.safeWrapper{
                    a:  int(456),
                },
            },
            {},
            {},
        },
    },
    redactedTags: nil,
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) tags: [k123,safe=456]
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *contexttags.withContext (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style ‹innerone›
(1) tags: [k‹123›,safe=456]
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *contexttags.withContext (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*contexttags.withContext: k× (2)
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "2: details"
k×
safe=456
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/contexttags/*contexttags.withContext (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
telemetry outerthree outerfour

require (?s)
----
&telemetrykeys.withTelemetry{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    keys: {"somekey", "outerthree\nouterfour"},
}
=====
===== non-redactable formats
=====
== %#v
&telemetrykeys.withTelemetry{
    cause: &withstack.withStack{
        cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
        stack: &stack{...},
    },
    keys: {"somekey", "outerthree\nouterfour"},
}
== Error()
new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style innerone
(1) keys: [somekey outerthree
  | outerfour]
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style innerone
  | innertwo
Error types: (1) *telemetrykeys.withTelemetry (2) *withstack.withStack (3) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style ‹innerone›
(1) keys: [somekey outerthree
  | outerfour]
Wraps: (2) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (3) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *telemetrykeys.withTelemetry (2) *withstack.withStack (3) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*telemetrykeys.withTelemetry: somekey (2)
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "2: details"
somekey
outerthree
   outerfour
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/telemetrykeys/*telemetrykeys.withTelemetry (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
wrapf outerthree outerfour

require (?s)outerthree.*outerfour.*
----
&withstack.withStack{
    cause: &errutil.withPrefix{
        cause: &withstack.withStack{
            cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
            stack: &stack{...},
        },
        prefix: "new-stylew ‹outerthree›\n‹outerfour›",
    },
    stack: &stack{...},
}
=====
===== non-redactable formats
=====
== %#v
&withstack.withStack{
    cause: &errutil.withPrefix{
        cause: &withstack.withStack{
            cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
            stack: &stack{...},
        },
        prefix: "new-stylew ‹outerthree›\n‹outerfour›",
    },
    stack: &stack{...},
}
== Error()
new-stylew outerthree
outerfour: new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-stylew outerthree: new-style innerone
(1) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func40
  | <tab><path>:<lineno>
  | [...repeated from below...]
Wraps: (2) new-stylew outerthree
  | outerfour
Wraps: (3) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (4) new-style innerone
  | innertwo
Error types: (1) *withstack.withStack (2) *errutil.withPrefix (3) *withstack.withStack (4) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-stylew ‹outerthree›
‹outerfour›: new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-stylew ‹outerthree›: new-style ‹innerone›
(1) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func40
  | <tab><path>:<lineno>
  | [...repeated from below...]
Wraps: (2) new-stylew ‹outerthree›
  | ‹outerfour›
Wraps: (3) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (4) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *withstack.withStack (2) *errutil.withPrefix (3) *withstack.withStack (4) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-stylew ×
×: new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*errutil.withPrefix: new-stylew × (2)
<path>:<lineno>: *withstack.withStack (3)
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "2: details"
new-stylew ×
   ×
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/errutil/*errutil.withPrefix (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "(3) <path>:<lineno> (func40)"
Title: "*withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func40()
== Exception 2 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-stylew ×\n×: new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()

run
newf innerone innertwo
wrapf-attached outerthree outerfour

require (?s)outerthree.*outerfour.*
----
----
&withstack.withStack{
    cause: &secondary.withSecondaryError{
        cause: &errutil.withPrefix{
            cause: &withstack.withStack{
                cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
                stack: &stack{...},
            },
            prefix: "new-style ‹outerthree›\n‹outerfour› (payload)",
        },
        secondaryError: &withstack.withStack{
            cause: &errutil.leafError{msg:"payload"},
            stack: &stack{...},
        },
    },
    stack: &stack{...},
}
=====
===== non-redactable formats
=====
== %#v
&withstack.withStack{
    cause: &secondary.withSecondaryError{
        cause: &errutil.withPrefix{
            cause: &withstack.withStack{
                cause: &errutil.leafError{msg:"new-style ‹innerone›\n‹innertwo›"},
                stack: &stack{...},
            },
            prefix: "new-style ‹outerthree›\n‹outerfour› (payload)",
        },
        secondaryError: &withstack.withStack{
            cause: &errutil.leafError{msg:"payload"},
            stack: &stack{...},
        },
    },
    stack: &stack{...},
}
== Error()
new-style outerthree
outerfour (payload): new-style innerone
innertwo
== %v = Error(), good
== %s = Error(), good
== %q = quoted Error(), good
== %x = hex Error(), good
== %X = HEX Error(), good
== %+v
new-style outerthree: new-style innerone
(1) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func51
  | <tab><path>:<lineno>
  | [...repeated from below...]
Wraps: (2) secondary error attachment
  | payload
  | (1) attached stack trace
  |   -- stack trace:
  |   | github.com/cockroachdb/errors/fmttests.glob..func51
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective.func1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runTestInternal
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.RunTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk.func1
  |   | <tab><path>:<lineno>
  |   | testing.tRunner
  |   | <tab><path>:<lineno>
  |   | runtime.goexit
  |   | <tab><path>:<lineno>
  | Wraps: (2) payload
  | Error types: (1) *withstack.withStack (2) *errutil.leafError
Wraps: (3) new-style outerthree
  | outerfour (payload)
Wraps: (4) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (5) new-style innerone
  | innertwo
Error types: (1) *withstack.withStack (2) *secondary.withSecondaryError (3) *errutil.withPrefix (4) *withstack.withStack (5) *errutil.leafError
== %#v via Formattable() = %#v, good
== %v via Formattable() = Error(), good
== %s via Formattable() = %v via Formattable(), good
== %q via Formattable() = quoted %v via Formattable(), good
== %+v via Formattable() == %+v, good
=====
===== redactable formats
=====
== printed via redact Print(), ok - congruent with %v
new-style ‹outerthree›
‹outerfour› (payload): new-style ‹innerone›
‹innertwo›
== printed via redact Printf() %v = Print(), good
== printed via redact Printf() %s = Print(), good
== printed via redact Printf() %q, refused - good
== printed via redact Printf() %x, refused - good
== printed via redact Printf() %X, refused - good
== printed via redact Printf() %+v, ok - congruent with %+v
new-style ‹outerthree›: new-style ‹innerone›
(1) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func51
  | <tab><path>:<lineno>
  | [...repeated from below...]
Wraps: (2) secondary error attachment
  | payload
  | (1) attached stack trace
  |   -- stack trace:
  |   | github.com/cockroachdb/errors/fmttests.glob..func51
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective.func1
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirective
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.runTestInternal
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.RunTest
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk
  |   | <tab><path>:<lineno>
  |   | github.com/cockroachdb/datadriven.Walk.func1
  |   | <tab><path>:<lineno>
  |   | testing.tRunner
  |   | <tab><path>:<lineno>
  |   | runtime.goexit
  |   | <tab><path>:<lineno>
  | Wraps: (2) payload
  | Error types: (1) *withstack.withStack (2) *errutil.leafError
Wraps: (3) new-style ‹outerthree›
  | ‹outerfour› (payload)
Wraps: (4) attached stack trace
  -- stack trace:
  | github.com/cockroachdb/errors/fmttests.glob..func15
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective.func1
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirective
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runDirectiveOrSubTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.runTestInternal
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.RunTest
  | <tab><path>:<lineno>
  | github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk
  | <tab><path>:<lineno>
  | github.com/cockroachdb/datadriven.Walk.func1
  | <tab><path>:<lineno>
  | testing.tRunner
  | <tab><path>:<lineno>
  | runtime.goexit
  | <tab><path>:<lineno>
Wraps: (5) new-style ‹innerone›
  | ‹innertwo›
Error types: (1) *withstack.withStack (2) *secondary.withSecondaryError (3) *errutil.withPrefix (4) *withstack.withStack (5) *errutil.leafError
=====
===== Sentry reporting
=====
== Message payload
<path>:<lineno>: new-style ×
× (payload): new-style ×
×
--
*errutil.leafError: new-style × (1)
<path>:<lineno>: *withstack.withStack (top exception)
*errutil.withPrefix: new-style × (2)
*secondary.withSecondaryError: details for github.com/cockroachdb/errors/withstack/*withstack.withStack::: (3)
<path>:<lineno>: *withstack.withStack (4)
(check the extra data payloads)
== Extra "1: details"
new-style ×
   ×
== Extra "2: details"
new-style ×
   × (payload)
== Extra "3: details"
details for github.com/cockroachdb/errors/withstack/*withstack.withStack:::
  
   github.com/cockroachdb/errors/fmttests.glob..func51
   <tab><path>:<lineno>
   github.com/cockroachdb/errors/fmttests.TestDatadriven.func2.1
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirective.func1
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirective
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runDirectiveOrSubTest
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.runTestInternal
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.RunTest
   <tab><path>:<lineno>
   github.com/cockroachdb/errors/fmttests.TestDatadriven.func2
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.Walk
   <tab><path>:<lineno>
   github.com/cockroachdb/datadriven.Walk.func1
   <tab><path>:<lineno>
   testing.tRunner
   <tab><path>:<lineno>
   runtime.goexit
   <tab><path>:<lineno>
details for github.com/cockroachdb/errors/errutil/*errutil.leafError:::
  payload
== Extra "error types"
github.com/cockroachdb/errors/errutil/*errutil.leafError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
github.com/cockroachdb/errors/errutil/*errutil.withPrefix (*::)
github.com/cockroachdb/errors/secondary/*secondary.withSecondaryError (*::)
github.com/cockroachdb/errors/withstack/*withstack.withStack (*::)
== Exception 1 (Module: "error domain: <none>")
Type: "(4) <path>:<lineno> (func51)"
Title: "*withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func51()
== Exception 2 (Module: "error domain: <none>")
Type: "<path>:<lineno> (func15)"
Title: "*errutil.leafError: new-style ×\n× (payload): new-style ×\n×\nvia *withstack.withStack"
<path>:<lineno>:
   (runtime) goexit()
<path>:<lineno>:
   (testing) tRunner()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.Walk) func1()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) Walk()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven) func2()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) RunTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runTestInternal()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirectiveOrSubTest()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven) runDirective()
<path>:<lineno>:
   (github.com/cockroachdb/datadriven.runDirective) func1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.TestDatadriven.func2) 1()
<path>:<lineno>:
   (github.com/cockroachdb/errors/fmttests.glob.) func15()
----
----
